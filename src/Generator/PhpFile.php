<?php

declare(strict_types=1);

namespace PhpFrameworkCodeGenerator\Generator;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile as NettePhpFile;
use Nette\PhpGenerator\PhpNamespace;

class PhpFile implements FileInterface
{
    /**
     * @var string
     */
    protected string $fileName;

    /**
     * @var ClassType
     */
    protected ClassType $phpClass;

    /**
     * @var NettePhpFile
     */
    protected NettePhpFile $phpFile;

    /**
     * @var PhpNamespace
     */
    protected PhpNamespace $phpNamespace;

    /**
     * @param string $fileName
     * @param string $moduleVendor
     * @param string $moduleName
     */
    public function __construct(string $fileName, string $moduleVendor, string $moduleName)
    {
        $className = $this->extractClassNameFromFileName($fileName);
        $namespace = $this->createNameSpace($fileName, $moduleVendor, $moduleName);

        $this->fileName = $fileName;
        $this->phpFile = new NettePhpFile();
        $this->phpClass = new ClassType($className);
        $this->phpNamespace = new PhpNamespace($namespace);
        $this->phpFile->addNamespace($this->phpNamespace->add($this->phpClass));
        $this->phpFile->addComment('Autogenerated by MageCodeGenerator');
    }

    /**
     * @return NettePhpFile
     */
    public function buildPhpFile(): NettePhpFile
    {
        $this->phpFile->addNamespace($this->phpNamespace->add($this->phpClass));
        return $this->phpFile;
    }

    /**
     * @return string
     */
    public function getFileName(): string
    {
        return $this->fileName;
    }

    /**
     * @return ClassType
     */
    public function getPhpClass(): ClassType
    {
        return $this->phpClass;
    }

    /**
     * @return NettePhpFile
     */
    public function getPhpFile(): NettePhpFile
    {
        return $this->phpFile;
    }

    /**
     * @return PhpNamespace
     */
    public function getPhpNamespace(): PhpNamespace
    {
        return $this->phpNamespace;
    }

    /**
     * @param  string $fileName
     * @param  string $moduleVendor
     * @param  string $moduleName
     * @return string
     */
    protected function createNameSpace(string $fileName, string $moduleVendor, string $moduleName): string
    {
        $prefixNamespace = $moduleVendor . '\\' . $moduleName;
        $fileNameNamespace = $this->extractNamespaceFromFileName($fileName);

        return sprintf('%s\\%s', $prefixNamespace, $fileNameNamespace);
    }

    /**
     * @param  string $fileName
     * @return string
     */
    protected function extractClassNameFromFileName(string $fileName): string
    {
        $fileNameParts = explode('/', $fileName);
        return ucfirst(str_replace('.php', '', end($fileNameParts)));
    }

    /**
     * @param  string $fileName
     * @return string
     */
    protected function extractNamespaceFromFileName(string $fileName): string
    {
        $fileNameParts = explode('/', $fileName);
        array_pop($fileNameParts);
        return implode('\\', $fileNameParts);
    }

    /**
     * @return string
     */
    public function __toString(): string
    {
        $this->buildPhpFile();
        return $this->phpFile->__toString();
    }
}
